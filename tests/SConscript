Import('env')

#########################################################################
#
#  regression test tools
#

env = env.Clone(
    tools=['expect',],
    toolpath=['.', '#scons-tools'],
    CC=env.File('#Release/csi-cc'),
    CFLAGS=(
        '--trace=$CSI_SCHEMA',
        '-no-filter',
        '-csi-opt=$CSI_OPTIMIZATION_LEVEL',
    ),
    CSI_OPTIMIZATION_SUFFIX='-O$CSI_OPTIMIZATION_LEVEL',
    CSI_SCHEMA=File('../schemas/all.schema'),
    OBJSUFFIX='${CSI_OPTIMIZATION_SUFFIX}$OBJSUFFIX',
    PROGSUFFIX='${CSI_OPTIMIZATION_SUFFIX}$PROGSUFFIX',
    )

if env['MEMCHECK']:
    env['ENV']['OPT_WRAPPER'] = 'valgrind --tool=memcheck --error-exitcode=26 --leak-check=full'

if 'LLVM_bindir' in env:
    env.PrependENVPath('PATH', env['LLVM_bindir'])

def ExtractStatic(environ, executable, suffix):
    extractor = File('#Tools/extract-section')
    check = executable.target_from_source('', '.csi-static-' + suffix)
    environ.Command(check,  (extractor, executable), '$SOURCE --require .debug_' + suffix + ' ${SOURCES[1]} >$TARGET')
    return check

def RunTest(self, basename, sources=None, optLevels=(0,)):
    for optLevel in optLevels:
        oenv = self.Clone(CSI_OPTIMIZATION_LEVEL=optLevel)

        if not sources: sources = (basename + '.c',)
        sources = map(File, sources)
        objects = oenv.Object(sources)
        executable, = oenv.Program(basename, objects)

        oenv.Depends((objects, executable), (
            oenv['CC'],
            '#driver/driver.py',
            '#Release/libCSI.so',
            Value('MEMCHECK=%s' % oenv['MEMCHECK']),
        ))
        oenv.Depends(objects, oenv['CSI_SCHEMA'])

        # extract and check static metadata
        extractor = File('#Tools/extract-section')
        for scheme in 'PT', 'CC', 'BBC', 'FC':
            actual = executable.target_from_source('', '.csi-static-' + scheme)
            oenv.Command(actual,  (extractor, executable), '$SOURCE --require .debug_' + scheme + ' ${SOURCES[1]} >$TARGET')
            passed = oenv.ExpectStaticCSI(actual)
            Alias('test', passed)

        # run execution test
        inputFile = basename + '.in'
        outputFile = executable.target_from_source('', '.out')
        oenv.Command(outputFile, (executable, inputFile), '$SOURCE < ${SOURCES[1]} >&$TARGET')
        expectOut = oenv.ExpectExact(outputFile)
        Alias('test', expectOut)


env.AddMethod(RunTest)


#########################################################################
#
#  regression test subdirs
#

SConscript(dirs=[
        'fnptr',
        'funcs',
        'loop',
        'lotsofifs',
        'multifile',
        'nocallmulti',
        'pi',
        ],
           exports='env')
